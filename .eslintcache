[{"/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/index.js":"1","/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/reportWebVitals.js":"2","/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/App.js":"3","/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/components/home/Home.js":"4","/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/components/home/HomeContact.js":"5","/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/components/navigation/Header.js":"6","/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/components/3dScenes/TropicFirstPerson.js":"7","/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/components/home/HomeScrollToTop.js":"8"},{"size":506,"mtime":1612202122718,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1612201803632,"results":"11","hashOfConfig":"10"},{"size":563,"mtime":1612202122698,"results":"12","hashOfConfig":"10"},{"size":2697,"mtime":1612203598531,"results":"13","hashOfConfig":"10"},{"size":2514,"mtime":1612202122562,"results":"14","hashOfConfig":"10"},{"size":726,"mtime":1612202122574,"results":"15","hashOfConfig":"10"},{"size":11681,"mtime":1612307325966,"results":"16","hashOfConfig":"10"},{"size":1220,"mtime":1612202122570,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"birys6",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/index.js",[],["37","38"],"/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/reportWebVitals.js",[],"/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/App.js",[],"/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/components/home/Home.js",[],"/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/components/home/HomeContact.js",[],"/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/components/navigation/Header.js",[],"/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/components/3dScenes/TropicFirstPerson.js",["39","40","41"],"import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { PointerLockControls } from \"three/examples/jsm/controls/PointerLockControls\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\n\n//\n//\nconst style = {\n  height: 600, // we can control scene size by setting container dimensions\n};\n//\n//\n//\n\n//\n//\n/*\n\n\n\n\n\n\n  */\nclass TropicalVoid extends Component {\n  componentDidMount() {\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    //\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n  //\n  //\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    // right now with the first person control,\n    // we dont need this dispose as it s already included inside the three folder, check the read me, in the\n    // beginning you will find a copy of the code inside the threejs that I am using.\n    // this.controls.dispose();\n  }\n  /*\n\n\n\n  */\n  // 1\n  sceneSetup = () => {\n    // background color scene\n    // this.lemonChiffon = \"rgb(240, 224, 190)\";\n\n    const width = this.eleModelBlOne.clientWidth;\n    const height = this.eleModelBlOne.clientHeight;\n    //\n    this.scene = new THREE.Scene();\n    // this.scene.background = new THREE.Color(0xffffff);\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      1,\n      1000\n    );\n    this.camera.position.y = 10;\n\n    //\n    //\n    this.renderer = new THREE.WebGL1Renderer({\n      // set the transparency of the scene, otherwise its black\n      // alpha: true,\n      // will make the edges smooth\n      antialias: true,\n    });\n    //\n    //\n    //\n\n    //\n    //\n    this.renderer.setSize(width, height);\n    // BG color from the scene\n    // this.renderer.setClearColor(this.lemonChiffon);\n    this.renderer.shadowMap.enabled = true;\n    // here you append it to the jsx\n    this.eleModelBlOne.appendChild(this.renderer.domElement); // mount using React ref\n\n    //\n    //\n    //\n    this.controls = new PointerLockControls(this.camera, this.eleModelBlOne);\n    //\n    //\n    //\n    //----------------\n    this.objects = [];\n    //----------------\n    //\n    let raycaster;\n\n    this.moveForward = false;\n    this.moveBackward = false;\n    this.moveLeft = false;\n    this.moveRight = false;\n    this.canJump = false;\n\n    this.prevTime = performance.now();\n    this.velocity = new THREE.Vector3();\n    this.direction = new THREE.Vector3();\n    this.vertex = new THREE.Vector3();\n    this.color = new THREE.Color();\n    //\n    //\n    //\n    //\n\n    const onKeyDown = function (event) {\n      switch (event.code) {\n        case \"ArrowUp\":\n        case \"KeyW\":\n          this.moveForward = true;\n          break;\n\n        case \"ArrowLeft\":\n        case \"KeyA\":\n          this.moveLeft = true;\n          break;\n\n        case \"ArrowDown\":\n        case \"KeyS\":\n          this.moveBackward = true;\n          break;\n\n        case \"ArrowRight\":\n        case \"KeyD\":\n          this.moveRight = true;\n          break;\n\n        //  ---------\n        //  JUMP\n        //  ---------\n        case \"Space\":\n          if (this.canJump === true) this.velocity.y += 350;\n          this.canJump = false;\n          break;\n      }\n    };\n\n    const onKeyUp = function (event) {\n      switch (event.code) {\n        case \"ArrowUp\":\n        case \"KeyW\":\n          this.moveForward = false;\n          break;\n\n        case \"ArrowLeft\":\n        case \"KeyA\":\n          this.moveLeft = false;\n          break;\n\n        case \"ArrowDown\":\n        case \"KeyS\":\n          this.moveBackward = false;\n          break;\n\n        case \"ArrowRight\":\n        case \"KeyD\":\n          this.moveRight = false;\n          break;\n      }\n    };\n    //\n    //\n    document.addEventListener(\"keydown\", onKeyDown);\n    document.addEventListener(\"keyup\", onKeyUp);\n    //\n\n    //\n    this.raycaster = new THREE.Raycaster(\n      new THREE.Vector3(),\n      new THREE.Vector3(0, -1, 0),\n      0,\n      10\n    );\n    //\n    // ---------------\n    // floor Geometry\n    // ---------------\n\n    this.floorGeometry = new THREE.PlaneGeometry(2000, 2000, 100, 100);\n    this.floorGeometry.rotateX(-Math.PI / 2);\n    //\n    //-------------------\n    // vertex displacement\n    //-------------------\n    //\n    let position = this.floorGeometry.attributes.position;\n    //\n    for (let i = 0, l = position.count; i < l; i++) {\n      this.vertex.fromBufferAttribute(position, i);\n      this.vertex.x += Math.random() * 20 - 10;\n      this.vertex.y += Math.random() * 2;\n      this.vertex.z += Math.random() * 20 - 10;\n      position.setXYZ(i, this.vertex.x, this.vertex.y, this.vertex.z);\n    }\n    // ensure each face has unique vertices  **\n    this.floorGeometry = this.floorGeometry.toNonIndexed();\n    //\n    position = this.floorGeometry.attributes.position;\n    //\n    //--------------\n    // colorsFloor\n    //--------------\n    const colorsFloor = [];\n    //\n    // what makes the triangles of the floor have different colors\n    for (let i = 0, l = position.count; i < l; i++) {\n      // here you are generating random colors HSL\n      this.color.setHSL(\n        Math.random() * 0.3 + 0.5,\n        0.75,\n        Math.random() * 0.25 + 0.75\n      );\n      colorsFloor.push(this.color.r, this.color.g, this.color.b);\n    }\n    //\n    this.floorGeometry.setAttribute(\n      \"color\",\n      new THREE.Float32BufferAttribute(colorsFloor, 3)\n    );\n    //\n    //\n    this.floorMaterial = new THREE.MeshBasicMaterial({ vertexColors: true });\n    //\n    //\n    // ------------ Here you add to the scene all the ABOVE -----\n    this.floor = new THREE.Mesh(this.floorGeometry, this.floorMaterial);\n    this.scene.add(this.floor);\n    //\n    //\n    // ---------\n    // BOXES GEOMETRY\n    // ---------\n    // .toNonIndexed();  ensure each face has unique vertices\n    this.boxGeometry = new THREE.BoxGeometry(20, 20, 20).toNonIndexed();\n    //\n    position = this.boxGeometry.attributes.position;\n    //--------------\n    // colors Box\n    //--------------\n    const colorsBox = [];\n    //\n    for (let i = 0, l = position.count; i < l; i++) {\n      this.color.setHSL(\n        Math.random() * 0.3 + 0.5,\n        0.75,\n        Math.random() * 0.25 + 0.75\n      );\n      colorsBox.push(this.color.r, this.color.g, this.color.b);\n    }\n    //\n    this.boxGeometry.setAttribute(\n      \"color\",\n      new THREE.Float32BufferAttribute(colorsBox, 3)\n    );\n    //\n    // the 500 correspond to the amount of boxes\n    // the material is MeshPhong, apparently its a good material to cast shadows\n    for (let i = 0; i < 500; i++) {\n      const boxMaterial = new THREE.MeshPhongMaterial({\n        specular: 0xffffff,\n        flatShading: true,\n        vertexColors: true,\n        // push a colour per vertex\n      });\n      boxMaterial.color.setHSL(\n        Math.random() * 0.2 + 0.5,\n        0.75,\n        Math.random() * 0.25 + 0.75\n      );\n      // ---------\n      // BOX\n      // ---------\n      const box = new THREE.Mesh(this.boxGeometry, boxMaterial);\n      box.position.x = Math.floor(Math.random() * 20 - 10) * 20;\n      box.position.y = Math.floor(Math.random() * 20) * 20 + 10;\n      box.position.z = Math.floor(Math.random() * 20 - 10) * 20;\n\n      this.scene.add(box);\n      this.objects.push(box);\n    }\n\n    //\n    //\n    //\n  };\n  //\n\n  /*\n\n\n\n\n\n\n  */\n  // 2\n  addCustomSceneObjects = () => {\n    //----------------------------------\n    //         BLENDER  MODELS\n    //----------------------------------\n    //\n    const loader = new GLTFLoader();\n    const dracoLoader = new DRACOLoader();\n    dracoLoader.setDecoderPath(\"myDecoder/\");\n    loader.setDRACOLoader(dracoLoader);\n\n    //\n    // terrain_grosso_moon.-Normalize-4_.glb\n    // 49,4Kb\n    loader.load(\"./models/palmera-sun-palmeras2_retoucheeeggg.glb\", (gltf) => {\n      this.meshy = gltf.scene;\n\n      gltf.scene.traverse((model) => {\n        if (model.material) model.material.metalness = 0.08;\n\n        model.receiveShadow = true;\n        model.scale.set(2, 2, 2);\n        // model.rotation.y = 1;\n        // model.rotation.x += -0;\n        // model.rotation.y += 0;\n        //\n        model.position.x = 0;\n        model.position.y = -0.4;\n        model.position.z = 0;\n        //\n        //\n        //\n      });\n\n      this.scene.add(gltf.scene);\n    });\n    //\n    /*\n    // Add PLANE  w , h , segments\n    const planeGeometry = new THREE.PlaneGeometry(500, 500, 100, 55);\n    const planeMaterial = new THREE.MeshLambertMaterial({\n      color: 0xdddddd,\n      wireframe: true,\n    });\n    // var planeMaterial = new THREE.MeshLambertMaterial((color: 0xff0000));\n    this.plane = new THREE.Mesh(planeGeometry, planeMaterial);\n    //\n    this.plane.rotation.x = -0.5 * Math.PI;\n    this.plane.position.y = -1;\n    //\n    //\n    // *** RECEIVE SHADOW\n    // related to the light and the shadow\n    this.plane.receiveShadow = true;\n    this.scene.add(this.plane);\n    //\n    */\n    //\n\n    /*\n    \n    \n    \n    \n    \n    \n    */\n    //---------------------\n    //   Directional Light\n    //---------------------\n    //\n    // //\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.autoUpdate = true;\n    this.renderer.gammaFactor = 2.2;\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff);\n    directionalLight.position.set(5, -1, 100);\n\n    // position as follow , the light comes from x:-1000, comes from: y and the last comes from : z\n    directionalLight.position.set(1000, 1000, 1000);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.camera = new THREE.OrthographicCamera(\n      -100,\n      200,\n      -200,\n      200,\n      0.5,\n      5000\n    );\n    // //\n    this.scene.add(directionalLight);\n    // The light points to the flat ground\n    // this.directionalLight.target = this.plane;  //dont add this\n    //\n    //\n    //THIS LIGHT IS ON THE BOTTOM\n    //---------------------\n    //     spotLight FF5733\n    //---------------------\n    //\n    //\n    //\n    //\n    // With the light you can see the colors you added to each geometry in the materials\n    this.spotLight = new THREE.SpotLight(0xffffff, 0.5); //intensity:   0.5);\n    // spotLight.position.set( 0 , 10 , 0 );\n    this.spotLight.position.set(5, -50, 0); //x, y , z   original (5, -50, 0);\n    // (2, 32, 32); with this settings the light will be on the front\n    this.spotLight.castShadow = true;\n    //\n    // this will remove the shadows\n    this.spotLight.visible = true;\n    //\n    this.scene.add(this.spotLight);\n    // //\n    //\n\n    /*\n\n\n\n \n */\n    //\n    //\n    // ------------------ clock\n\n    //\n    //\n    //\n  };\n\n  // 3\n  startAnimationLoop = () => {\n    //\n    this.renderer.render(this.scene, this.camera);\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n  };\n  /*\n\n\n\n  */\n  handleWindowResize = () => {\n    const width = this.eleModelBlOne.clientWidth;\n    const height = this.eleModelBlOne.clientHeight;\n    //\n    // updated renderer\n    this.renderer.setSize(width, height);\n    // updated **camera** aspect ratio\n    this.camera.aspect = width / height;\n    // That is the Three.js optimization: you can group multiple camera changes into a block with only one\n    this.camera.updateProjectionMatrix();\n  };\n  /*\n\n\n  */\n  render() {\n    return (\n      <div className=\"scene-oblivion\">\n        <div\n          className=\"modelBleOne\"\n          style={style}\n          ref={(ref) => (this.eleModelBlOne = ref)}\n        ></div>\n      </div>\n    );\n  }\n}\n\nexport default TropicalVoid;\n","/home/dci-st119/Documents/3D-UNITY-BLENDER-REACTVR-ALL/NM_PORTFOLIO_THREE_2021/firstperson-control1-threejs/src/components/home/HomeScrollToTop.js",[],["42","43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":99,"column":9,"nodeType":"50","messageId":"51","endLine":99,"endColumn":18},{"ruleId":"52","severity":1,"message":"53","line":118,"column":7,"nodeType":"54","messageId":"55","endLine":146,"endColumn":8},{"ruleId":"52","severity":1,"message":"53","line":150,"column":7,"nodeType":"54","messageId":"55","endLine":170,"endColumn":8},{"ruleId":"44","replacedBy":"56"},{"ruleId":"46","replacedBy":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'raycaster' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["58"],["59"],"no-global-assign","no-unsafe-negation"]